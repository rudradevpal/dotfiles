export FZF_DEFAULT_OPTS='--reverse'

alias k="kubectl"
alias kx="kubectx"
alias kn="kubens"

alias kxadd='f() { [ $# -ne 2 ] && { echo "Usage: add_kubeconfig <path-to-kubeconfig> <new-context-name>"; return 1; }; KUBECONFIG_PATH="$1" NEW_CONTEXT_NAME="$2"; [ ! -f "$KUBECONFIG_PATH" ] && { echo "Kubeconfig file not found: $KUBECONFIG_PATH"; return 1; }; CURRENT_KUBECONFIG="$HOME/.kube/config"; KUBECONFIG="$CURRENT_KUBECONFIG:$KUBECONFIG_PATH" kubectl config view --flatten > "$CURRENT_KUBECONFIG.new"; mv "$CURRENT_KUBECONFIG.new" "$CURRENT_KUBECONFIG"; OLD_CONTEXT_NAME="$(kubectl config get-contexts --kubeconfig="$KUBECONFIG_PATH" -o name | head -n 1)"; kubectl config get-contexts | grep -q "$NEW_CONTEXT_NAME" && { suffix=1; while kubectl config get-contexts | grep -q "${NEW_CONTEXT_NAME}-${suffix}"; do suffix=$((suffix + 1)); done; NEW_CONTEXT_NAME="${NEW_CONTEXT_NAME}-${suffix}"; }; kubectl config rename-context "$OLD_CONTEXT_NAME" "$NEW_CONTEXT_NAME"; kubectl config set-context "$NEW_CONTEXT_NAME" --namespace=default; echo "Kubeconfig from $KUBECONFIG_PATH has been added with context name '$NEW_CONTEXT_NAME' and namespace set to 'default.'"; }; f'

alias kxdel='CONTEXT_NAME=$(kubectl config get-contexts -o name | fzf) && [ -n "$CONTEXT_NAME" ] && kubectl config delete-context "$CONTEXT_NAME" && echo "Context \"$CONTEXT_NAME\" deleted." || echo "No context selected."'

alias klogs='f() { [ -z "$1" ] && POD=$(kubectl get pods -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$POD" ] && kubectl logs -f "$POD" || kubectl logs -f "$1"; }; f'

alias klogsc='f() { [ -z "$1" ] && OD=$(kubectl get pods -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf); CONTAINER=$(kubectl get pod "$POD" -o jsonpath="{.spec.containers[*].name}" | tr " " "\n" | fzf); [ -n "$POD" ] && [ -n "$CONTAINER" ] && kubectl logs "$POD" -c "$CONTAINER" || kubectl logs -f "$1"; }; f'

alias kdescpo='f() { [ -z "$1" ] && POD=$(kubectl get pods -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$POD" ] && kubectl describe pod "$POD" || kubectl describe pod "$1"; }; f'

alias kdescdeploy='f() { [ -z "$1" ] && DEPLOYMENT=$(kubectl get deployments -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$DEPLOYMENT" ] && kubectl describe deployment "$DEPLOYMENT" || kubectl describe deployment "$1"; }; f'

alias kdescnodes='f() { [ -z "$1" ] && NODE=$(kubectl get nodes -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$NODE" ] && kubectl describe node "$NODE" || kubectl describe node "$1"; }; f'

alias kdescsvc='f() { [ -z "$1" ] && SERVICE=$(kubectl get svc -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$SERVICE" ] && kubectl describe svc "$SERVICE" || kubectl describe svc "$1"; }; f'

alias kdelpo='f() { [ -z "$1" ] && POD=$(kubectl get pods -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$POD" ] && kubectl delete pod "$POD" && echo "Pod \"$POD\" deleted." || kubectl delete po "$1"; }; f'

alias kdeldeploy='f() { [ -z "$1" ] && DEPLOYMENT=$(kubectl get deployments -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$DEPLOYMENT" ] && kubectl delete deployment "$DEPLOYMENT" && echo "Deployment \"$DEPLOYMENT\" deleted." || kubectl delete deploy "$1"; }; f'

alias kdelns='f() { [ -z "$1" ] && NAMESPACE=$(kubectl get ns -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$NAMESPACE" ] && kubectl delete ns "$NAMESPACE" && echo "Namespace \"$NAMESPACE\" deleted." || kubectl delete ns "$1"; }; f'

alias kexec='f() { [ -z "$1" ] && POD=$(kubectl get pods -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$POD" ] && kubectl exec -it "$POD" -- /bin/bash || kubectl exec -it "$1" -- /bin/bash; }; f'

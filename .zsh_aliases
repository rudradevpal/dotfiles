export FZF_DEFAULT_OPTS='--reverse'

# For Kubernetes
alias k="kubectl"
alias kx="kubectx"
alias kn="kubens"

alias kxadd='f() { [ $# -ne 1 ] && { echo "Usage: kxadd <PATH TO KUBECONFIG>"; return 1; }; KUBECONFIG_PATH="$1"; [ ! -f "$KUBECONFIG_PATH" ] && { echo "Kubeconfig file not found: $KUBECONFIG_PATH"; return 1; }; CURRENT_KUBECONFIG="$HOME/.kube/config"; OLD_CONTEXT_NAME="$(kubectl config get-contexts --kubeconfig="$KUBECONFIG_PATH" -o name | head -n 1)"; printf "Enter new context name (or press Enter to use \"$OLD_CONTEXT_NAME\"): "; read NEW_CONTEXT_NAME; NEW_CONTEXT_NAME="${NEW_CONTEXT_NAME:-$OLD_CONTEXT_NAME}"; kubectl config get-contexts | grep -q "$NEW_CONTEXT_NAME" && { suffix=1; while kubectl config get-contexts | grep -q "${NEW_CONTEXT_NAME}-${suffix}"; do suffix=$((suffix + 1)); done; NEW_CONTEXT_NAME="${NEW_CONTEXT_NAME}-${suffix}"; }; cp "$KUBECONFIG_PATH" "$CURRENT_KUBECONFIG.tmp"; [ "$OLD_CONTEXT_NAME" != "$NEW_CONTEXT_NAME" ] && kubectl config rename-context "$OLD_CONTEXT_NAME" "$NEW_CONTEXT_NAME" --kubeconfig="$CURRENT_KUBECONFIG.tmp"; KUBECONFIG="$CURRENT_KUBECONFIG:$CURRENT_KUBECONFIG.tmp" kubectl config view --flatten > "$CURRENT_KUBECONFIG.new"; mv "$CURRENT_KUBECONFIG.new" "$CURRENT_KUBECONFIG"; rm -rf "$CURRENT_KUBECONFIG.tmp"; kubectl config set-context "$NEW_CONTEXT_NAME" --namespace=default; echo "Kubeconfig from $KUBECONFIG_PATH has been added with context name '$NEW_CONTEXT_NAME' and namespace set to 'default.'"; }; f'

#alias kxadd='f() { [ $# -ne 1 ] && { echo "Usage: kxadd <PATH TO KUBECONFIG>"; return 1; }; KUBECONFIG_PATH="$1"; [ ! -f "$KUBECONFIG_PATH" ] && { echo "Kubeconfig file not found: $KUBECONFIG_PATH"; return 1; }; CURRENT_KUBECONFIG="$HOME/.kube/config"; KUBECONFIG="$CURRENT_KUBECONFIG:$KUBECONFIG_PATH" kubectl config view --flatten > "$CURRENT_KUBECONFIG.new"; mv "$CURRENT_KUBECONFIG.new" "$CURRENT_KUBECONFIG"; OLD_CONTEXT_NAME="$(kubectl config get-contexts --kubeconfig="$KUBECONFIG_PATH" -o name | head -n 1)"; printf "Enter new context name (or press Enter to use \"$OLD_CONTEXT_NAME\"): "; read NEW_CONTEXT_NAME; NEW_CONTEXT_NAME="${NEW_CONTEXT_NAME:-$OLD_CONTEXT_NAME}"; kubectl config get-contexts | grep -q "^$NEW_CONTEXT_NAME\$" && { suffix=1; while kubectl config get-contexts | grep -q "^${NEW_CONTEXT_NAME}-${suffix}\$"; do suffix=$((suffix + 1)); done; NEW_CONTEXT_NAME="${NEW_CONTEXT_NAME}-${suffix}"; }; kubectl config rename-context "$OLD_CONTEXT_NAME" "$NEW_CONTEXT_NAME"; kubectl config set-context "$NEW_CONTEXT_NAME" --namespace=default; echo "Kubeconfig from $KUBECONFIG_PATH has been added with context name '$NEW_CONTEXT_NAME' and namespace set to 'default.'"; }; f'

alias kxdel='f() { CONTEXT_NAME=$(kubectl config get-contexts -o name | fzf); if [ -n "$CONTEXT_NAME" ]; then kubectl config delete-context "$CONTEXT_NAME" && echo "Context \"$CONTEXT_NAME\" deleted."; CURRENT_CONTEXT=$(kubectl config current-context); if [ "$CURRENT_CONTEXT" = "$CONTEXT_NAME" ]; then DEFAULT_CONTEXT=$(kubectl config get-contexts -o name | grep -v "$CONTEXT_NAME" | head -n 1); if [ -n "$DEFAULT_CONTEXT" ]; then kubectl config use-context "$DEFAULT_CONTEXT" && echo "Switched to context \"$DEFAULT_CONTEXT\"."; else echo "No other context available."; fi; fi; else echo "No context selected."; fi; }; f'

alias klogs='f() { [ -z "$1" ] && POD=$(kubectl get pods -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$POD" ] && kubectl logs -f "$POD" || kubectl logs -f "$1"; }; f'

alias klogsc='f() { [ -z "$1" ] && OD=$(kubectl get pods -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf); CONTAINER=$(kubectl get pod "$POD" -o jsonpath="{.spec.containers[*].name}" | tr " " "\n" | fzf); [ -n "$POD" ] && [ -n "$CONTAINER" ] && kubectl logs "$POD" -c "$CONTAINER" || kubectl logs -f "$1"; }; f'

alias kdescpo='f() { [ -z "$1" ] && POD=$(kubectl get pods -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$POD" ] && kubectl describe pod "$POD" || kubectl describe pod "$1"; }; f'

alias kdescdeploy='f() { [ -z "$1" ] && DEPLOYMENT=$(kubectl get deployments -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$DEPLOYMENT" ] && kubectl describe deployment "$DEPLOYMENT" || kubectl describe deployment "$1"; }; f'

alias kdescnodes='f() { [ -z "$1" ] && NODE=$(kubectl get nodes -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$NODE" ] && kubectl describe node "$NODE" || kubectl describe node "$1"; }; f'

alias kdescsvc='f() { [ -z "$1" ] && SERVICE=$(kubectl get svc -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$SERVICE" ] && kubectl describe svc "$SERVICE" || kubectl describe svc "$1"; }; f'

alias kdelpo='f() { [ -z "$1" ] && POD=$(kubectl get pods -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$POD" ] && kubectl delete pod "$POD" && echo "Pod \"$POD\" deleted." || kubectl delete po "$1"; }; f'

alias kdeldeploy='f() { [ -z "$1" ] && DEPLOYMENT=$(kubectl get deployments -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$DEPLOYMENT" ] && kubectl delete deployment "$DEPLOYMENT" && echo "Deployment \"$DEPLOYMENT\" deleted." || kubectl delete deploy "$1"; }; f'

alias kdelns='f() { [ -z "$1" ] && NAMESPACE=$(kubectl get ns -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$NAMESPACE" ] && kubectl delete ns "$NAMESPACE" && echo "Namespace \"$NAMESPACE\" deleted." || kubectl delete ns "$1"; }; f'

alias kexec='f() { [ -z "$1" ] && POD=$(kubectl get pods -o jsonpath="{.items[*].metadata.name}" | tr " " "\n" | fzf) && [ -n "$POD" ] && kubectl exec -it "$POD" -- /bin/bash || kubectl exec -it "$1" -- /bin/bash; }; f'

# For SSH
#alias sshxadd='f() { [ "$#" -lt 1 ] || [ "$#" -gt 2 ] && { echo "Usage: sshx <user@hostname> [port]"; return 1; }; IFS="@" read -r SSHX_USERNAME SSHX_HOST <<< "$1"; SSHX_PORT="${2:-22}"; INVENTORY_FILE="$HOME/.sshx_history"; [ ! -f "$INVENTORY_FILE" ] && touch "$INVENTORY_FILE"; grep -q "^$SSHX_HOST" "$INVENTORY_FILE" || { echo "* SSHX: FOR THE FIRST TIME YOU NEED TO ENTER PASSWORD TWICE" && SSHX_HOSTNAME=$(ssh -o StrictHostKeyChecking=no -p "$SSHX_PORT" "$SSHX_USERNAME@$SSHX_HOST" "hostname"); echo "$SSHX_HOST $SSHX_HOSTNAME $SSHX_USERNAME $SSHX_PORT" >> "$INVENTORY_FILE" && echo "Added $SSHX_HOST to your inventory."; }; ssh -o StrictHostKeyChecking=no -p "$SSHX_PORT" "$SSHX_USERNAME@$SSHX_HOST"; }; f'

alias sshxadd='f() { [ "$#" -lt 1 ] || [ "$#" -gt 2 ] && { echo "Usage: sshx <user@hostname> [port]"; return 1; }; IFS="@" read -r SSHX_USERNAME SSHX_HOST <<< "$1"; SSHX_PORT="${2:-22}"; INVENTORY_FILE="$HOME/.sshx_history"; [ ! -f "$INVENTORY_FILE" ] && touch "$INVENTORY_FILE"; command -v sshpass >/dev/null 2>&1 || { echo "sshpass is required but not installed. Aborting." >&2; return 1; }; if ! grep -q "^$SSHX_HOST" "$INVENTORY_FILE"; then echo -ne "$SSHX_USERNAME@$SSHX_HOST password: "; read -s SSHX_PASSWORD; echo ""; SSHX_HOSTNAME=$(sshpass -p "$SSHX_PASSWORD" ssh -o StrictHostKeyChecking=no -p "$SSHX_PORT" "$SSHX_USERNAME@$SSHX_HOST" "hostname") || { echo "Failed to connect. Exiting."; return 1; }; echo "$SSHX_HOST $SSHX_HOSTNAME $SSHX_USERNAME $SSHX_PORT $SSHX_PASSWORD" >> "$INVENTORY_FILE"; echo "Added $SSHX_HOST to your inventory."; else SSHX_PASSWORD=$(grep "^$SSHX_HOST" "$INVENTORY_FILE" | awk '\''{print $5}'\''); fi; sshpass -p "$SSHX_PASSWORD" ssh -o StrictHostKeyChecking=no -p "$SSHX_PORT" "$SSHX_USERNAME@$SSHX_HOST"; }; f'

#alias sshxlist='f() { INVENTORY_FILE="$HOME/.sshx_history"; [ ! -f "$INVENTORY_FILE" ] && { echo "Inventory file not found!"; return 1; }; SELECTED_HOST=$(awk "{print \$1, \$2, \$3, \$4}" "$INVENTORY_FILE" | fzf --header="Select a host to SSH into:"); [ -z "$SELECTED_HOST" ] && { echo "No host selected."; return 1; }; IFS=" " read -r SSHX_HOST SSHX_HOSTNAME SSHX_USERNAME SSHX_PORT <<< "$SELECTED_HOST"; ssh -p "$SSHX_PORT" "$SSHX_USERNAME@$SSHX_HOST"; }; f'

alias sshxlist='f() { INVENTORY_FILE="$HOME/.sshx_history"; [ ! -f "$INVENTORY_FILE" ] && { echo "Inventory file not found!"; return 1; }; SELECTED_HOST=$(awk "{print \$1, \$2, \$3, \$4, \"******\"}" "$INVENTORY_FILE" | fzf --header="Select a host to SSH into:"); [ -z "$SELECTED_HOST" ] && { echo "No host selected."; return 1; }; IFS=" " read -r SSHX_HOST SSHX_HOSTNAME SSHX_USERNAME SSHX_PORT SSHX_PASSWORD <<< "$SELECTED_HOST"; SSHX_PASSWORD=$(grep "^$SSHX_HOST" "$INVENTORY_FILE" | awk '\''{print $5}'\''); sshpass -p "$SSHX_PASSWORD" ssh -o StrictHostKeyChecking=no -p "$SSHX_PORT" "$SSHX_USERNAME@$SSHX_HOST"; }; f'

alias sshxdel='f() { INVENTORY_FILE="$HOME/.sshx_history"; [ ! -f "$INVENTORY_FILE" ] && { echo "Inventory file not found!"; return 1; }; SELECTED_HOST=$(awk "{print \$1, \$2, \$3, \$4, \"*****\"}" "$INVENTORY_FILE" | fzf --header="Select a host to delete:" --reverse); [ -z "$SELECTED_HOST" ] && { echo "No host selected."; return 1; }; HOST_TO_DELETE=$(echo "$SELECTED_HOST" | awk "{print \$1}"); if [[ "$OSTYPE" == "darwin"* ]]; then sed -i "" "/^$HOST_TO_DELETE /d" "$INVENTORY_FILE"; else sed -i "/^$HOST_TO_DELETE /d" "$INVENTORY_FILE"; fi; echo "Deleted $HOST_TO_DELETE from inventory."; }; f'

alias sshx='f() { if [ "$#" -eq 0 ]; then sshxlist; else sshxadd "$@"; fi; }; f'
